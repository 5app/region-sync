const logger = require('@5app/logger');
const {SnsProducer} = require('sns-sqs-big-payload');

const snsProducerByTopic = {}; // mapping between the sns producer generated by `sns-sqs-big-payload` and the sns topic url

function createPublisher(config) {
	const {
		currentRegion,
		snsRegion,
		awsEndpoint,
		// enabled=false allows you to call the methods, but not actually publish anything
		enabled = true,
		s3BucketForLargePayloads, // S3 bucket used to store payloads bigger than 256 KB. See https://aws.amazon.com/sns/faqs/#Quotas_and_restrictions
	} = config;

	function getOrCreateSnsProducer(topicArn) {
		if (snsProducerByTopic[topicArn]) {
			return snsProducerByTopic[topicArn];
		}

		const snsProducer = SnsProducer.create({
			topicArn,
			region: snsRegion,
			snsEndpointUrl: awsEndpoint,
			largePayloadThoughS3: Boolean(s3BucketForLargePayloads),
			s3Bucket: s3BucketForLargePayloads,
			s3EndpointUrl: awsEndpoint,
		});

		snsProducerByTopic[topicArn] = snsProducer;

		return snsProducer;
	}

	async function sendSNSMessage(topicArn, payload = null) {
		const snsProducer = getOrCreateSnsProducer(topicArn);
		const message = {
			payload,
			fromRegion: currentRegion,
			date: new Date().toISOString(),
		};

		logger.info(`Publishing message`, {message, topicArn});

		return snsProducer.publishJSON(message);
	}

	async function publish(topicArn, payload) {
		if (!enabled) {
			logger.warn(`Attempting to publish to ${topicArn} when disabled.`);
			return;
		}

		return sendSNSMessage(topicArn, payload);
	}

	return {
		publish,
	};
}

module.exports = {
	createPublisher,
};
